library(geodata)
help(landcover)
landcoverall=landcover("cropland", path=tempdir())
plot(landcoverall)
plot(landcoverall,main="Crop land percent")
malawi_aoi <- gadm(country="MWI", level=0, path="shp")
plot(malawi_aoi)
malawi_aoi_cropland <- mask(landcoverall,malawi_aoi)
plot(malawi_aoi_cropland,main="Crop land percent")
malawi_aoi_cropland <- crop(malawi_aoi_cropland,malawi_aoi)
plot(malawi_aoi_cropland,main="Crop land percent")
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jre-1.8")
Sys.getenv("JAVA_HOME")
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jre-1.8")
Sys.getenv("JAVA_HOME")
Sys.getenv("JAVA_HOME")
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jre-1.8")
Sys.getenv("JAVA_HOME")
install.packages("rJava",,"http://rforge.net")
install.packages("rJava",,"http://rforge.net", IGNORE=1)
library(rmoo)
library(ecr)
library(emoa)
#Example
#Two Objectives - Real Valued
zdt1 <- function (x) {
if (is.null(dim(x))) {
x <- matrix(x, nrow = 1)
}
n <- ncol(x)
g <- 1 + rowSums(x[, 2:n, drop = FALSE]) * 9/(n - 1)
return(cbind(x[, 1], g * (1 - sqrt(x[, 1]/g))))
}
View(zdt1)
result <- nsga(type = "real-valued",
fitness = zdt1,
lower = c(0,0),
upper = c(1,1),
popSize = 100,
dshare = 1,
monitor = FALSE,
maxiter = 500)
summary(result)
help(nsga)
help("nsga2")
library("GA")
library(quantmod)
myStocks <- c("AAPL", "XOM", "GOOGL", "MSFT", "GE", "JNJ", "WMT", "CVX", "PG", "WFC")
getSymbols(myStocks, src = "yahoo")
returns <- lapply(myStocks, function(s)
monthlyReturn(eval(parse(text = s)),
subset = "2013::2014"))
returns <- do.call(cbind,returns)
colnames(returns) <- myStocks
library(timeSeries)
plot(as.timeSeries(returns), at = "chic", minor.ticks="month",
mar.multi = c(0.2, 5.1, 0.2, 1.1), oma.multi = c(4, 0, 4, 0),
col = .colorwheelPalette(10), cex.lab = 0.8, cex.axis = 0.8)
plot(s, R, type = "n", panel.first = grid(),xlab = "Std. dev. monthly returns", ylab = "Average monthly returns")
nStocks <- ncol(returns) # number of portfolio assets
R <- colMeans(returns) # average monthly returns
S <- cov(returns) # covariance matrix of monthly returns
s <- sqrt(diag(S)) # volatility of monthly returns
plot(s, R, type = "n", panel.first = grid(),xlab = "Std. dev. monthly returns", ylab = "Average monthly returns")
plot(s, R, type = "n", panel.first = grid(),xlab = "Std. dev. monthly returns", ylab = "Average monthly returns")
text(s, R, names(R), col = .colorwheelPalette(10), font = 2)
weights <- function (w) # normalised weights
{drop(w/sum(w))}
ExpReturn <- function (w) # expected return
{sum(weights(w)*R)}
VarPortfolio <- function (w) # objective function
{w <- weights (w)
drop (w%*%S%*%w)}
fitness <- function (w)   # fitness function
{ER <-ExpReturn(w)-0.01
penalty <-if (ER<0) 100*ER^2 else 0
-(VarPortfolio(w)+penalty)}
GA <- ga(type = "real-valued", fitness = fitness,
min = rep(0, nStocks), max = rep(1, nStocks), names = myStocks,
maxiter = 1000, run = 200, optim = TRUE)
summary(GA)
plot (GA)
(w <- weights(GA@solution))
ExpReturn(w)
VarPortfolio(w)
barplot(w, xlab = "Stocks", ylab = "Portfolio weights",
cex.names = 0.7, col = .colorwheelPalette(10))
View(returns)
library(fPortfolio)
library(timeSeries)
library(lubridate)
library(psych)
covOGKEstimate <- covOGKEstimator(returns)
returns_t <-timeSeries(retunrs)
returns_t <-timeSeries(returns)
covOGKEstimate <- covOGKEstimator(returns_t)
fastCovOGKEstimator <- function(x, spec = NULL, ...) covOGKEstimate
covOGKSpec <- portfolioSpec()
setEstimator(covOGKSpec) <- "fastCovOGKEstimator"
setNFrontierPoints(covOGKSpec) <- 5
covOGKFrontier <- portfolioFrontier(
data = returns_t, spec = covOGKSpec)
print(covOGKFrontier)
setNFrontierPoints(covOGKSpec) <- 20
covOGKFrontier <- portfolioFrontier(
data = returns_t, spec = covOGKSpec)
tailoredFrontierPlot(
covOGKFrontier,
mText = "OGK Robustified MV Portfolio",
risk = "Sigma")
weightsPlot(covOGKFrontier,mtext = FALSE)
yield_return=getTargetReturn(covOGKFrontier)
yield_risk <- getTargetRisk(covOGKFrontier)
yield_wts <- getWeights(covOGKFrontier)
yield_frontier = cbind(yield_return, yield_risk, yield_wts)
library(htmltools)
library(fontawesome)
htmltools::browsable(
tagList(
tags$button(
tagList(fontawesome::fa("download"), "Download as CSV"),
onclick = "Reactable.downloadDataCSV('yield_frontier', 'yield_frontier.csv')"
),
reactable(
yield_frontier,
searchable = TRUE,
defaultPageSize = 12,
elementId = "yield_frontier"
)
)
)
library(reactable)
htmltools::browsable(
tagList(
tags$button(
tagList(fontawesome::fa("download"), "Download as CSV"),
onclick = "Reactable.downloadDataCSV('yield_frontier', 'yield_frontier.csv')"
),
reactable(
yield_frontier,
searchable = TRUE,
defaultPageSize = 12,
elementId = "yield_frontier"
)
)
)
fitness
weights()
weights
help("nsga2")
library(rmoo)
library(ecr)
library(emoa)
ga_nsga2 <- nsga2(type = "real-valued",
fitness = fitness,
lower = rep(0, nStocks),
upper = rep(1, nStocks),
popSize = 200,
dshare = 1,
monitor = FALSE,
maxiter = 1000)
ga_nsga2 <- nsga2(type = "real-valued",
fitness = fitness,
lower = c(0,0),
upper = c(1,1),
popSize = 200,
dshare = 1,
monitor = FALSE,
maxiter = 1000)
min = rep(0, nStocks)
ga_nsga2 <- nsga2(type = "real-valued",
fitness = fitness,
lower = c(0,0,0,0,0,0,0,0,0,0),
upper = c(1,1,1,1,1,1,1,1,1,1),
popSize = 200,
monitor = FALSE,
maxiter = 1000)
View(fitness)
zdt1 <- function (x) {
if (is.null(dim(x))) {
x <- matrix(x, nrow = 1)
}
n <- ncol(x)
g <- 1 + rowSums(x[, 2:n, drop = FALSE]) * 9/(n - 1)
return(cbind(x[, 1], g * (1 - sqrt(x[, 1]/g))))
}
View(zdt1)
View(fitness)
library(sf)
landunits=read_sf("LandUnits/MW_land_units/land_units_1st_code_fnl_ADD_specific.shp")
landunits$T_Pigeonpe_suit[landunits$T_Pigeonpe%in%c("1","2")]="1:Highly suitable"
landunits$T_Pigeonpe_suit[landunits$T_Pigeonpe%in%c("3","4")]="2:Moderately suitable"
landunits$T_Pigeonpe_suit[landunits$T_Pigeonpe%in%c("5","6")]="3:Marginally suitable"
landunits$T_Pigeonpe_suit[landunits$T_Pigeonpe%in%c("7")]="4:Not suitable"
landunits$T_Pigeonpe_suit[landunits$I_Pigeonpe%in%c("9")]=NA
landunits_sp=as_Spatial(landunits)
library(tmap)
tmap_mode("plot")
pp_suitability_map=tm_shape(landunits_sp) +
tm_polygons(col = "T_Pigeonpe_suit",palette = "-viridis", title = "Pigeopea suitability class",     textNA = "Suitability not estimated",border.alpha = 0.1) +
tm_layout(legend.outside = TRUE,title.size=4)+
tmap_options(check.and.fix = TRUE)
pp_suitability_map
names(landunits)
72-11
table(landunits$T_Maize)
landunits$T_Maize_suit_num[landunits$T_Maize%in%c("1","2")]=3
landunits$T_Maize_suit_num[landunits$T_Maize%in%c("3","4")]=2
landunits$T_Maize_suit_num[landunits$T_Maize%in%c("5","6")]=1
landunits$T_Maize_suit_num[landunits$T_Maize%in%c("7")]=0
landunits$T_Maize_suit_num[landunits$I_Maize_l%in%c("9")]=NA
table(landunits$T_Maize_suit_num)
landunits$I_Maize_l_suit_num[landunits$I_Maize_l%in%c("1","2")]=3
landunits$I_Maize_l_suit_num[landunits$I_Maize_l%in%c("3","4")]=2
landunits$I_Maize_l_suit_num[landunits$I_Maize_l%in%c("5","6")]=1
landunits$I_Maize_l_suit_num[landunits$I_Maize_l%in%c("7")]=0
landunits$I_Maize_l_suit_num[landunits$I_Maize_l%in%c("9")]=NA
table(landunits$I_Maize_suit_num)
table(landunits$I_Maize_l_suit_num)
landunits$I_Maize_s_suit_num[landunits$I_Maize_s%in%c("1","2")]=3
landunits$I_Maize_s_suit_num[landunits$I_Maize_s%in%c("3","4")]=2
landunits$I_Maize_s_suit_num[landunits$I_Maize_s%in%c("5","6")]=1
landunits$I_Maize_s_suit_num[landunits$I_Maize_s%in%c("7")]=0
landunits$I_Maize_s_suit_num[landunits$I_Maize_s%in%c("9")]=NA
table(landunits$I_Maize_s_suit_num)
landunits$I_Maize_s_suit_num[landunits$I_Maize_s%in%c("1","2")]=3
landunits$I_Maize_s_suit_num[landunits$I_Maize_s%in%c("3","4")]=2
landunits$I_Maize_s_suit_num[landunits$I_Maize_s%in%c("5","6")]=1
landunits$I_Maize_s_suit_num[landunits$I_Maize_s%in%c("7")]=0
landunits$I_Maize_s_suit_num[landunits$I_Maize_l%in%c("9")]=NA
table(landunits$I_Maize_s_suit_num)
## Traditional
landunits$T_Pigeonpe_suit_num[landunits$T_Pigeonpe%in%c("1","2")]="3"
landunits$T_Pigeonpe_suit_num[landunits$T_Pigeonpe%in%c("3","4")]="2"
landunits$T_Pigeonpe_suit_num[landunits$T_Pigeonpe%in%c("5","6")]="1"
landunits$T_Pigeonpe_suit_num[landunits$T_Pigeonpe%in%c("7")]="0"
landunits$T_Pigeonpe_suit_num[landunits$I_Pigeonpe%in%c("9")]=NA
## Improved
landunits$I_Pigeonpe_suit_num[landunits$I_Pigeonpe%in%c("1","2")]="3"
landunits$I_Pigeonpe_suit_num[landunits$I_Pigeonpe%in%c("3","4")]="2"
landunits$I_Pigeonpe_suit_num[landunits$I_Pigeonpe%in%c("5","6")]="1"
landunits$I_Pigeonpe_suit_num[landunits$I_Pigeonpe%in%c("7")]="0"
landunits$I_Pigeonpe_suit_num[landunits$I_Pigeonpe%in%c("9")]=NA
spamCrops()
library(geodata)
spamCrops()
names(landunits)
names(landunits)
